{"version":3,"file":"msw-dynamic-http-middleware.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["import pino from 'pino';\nimport { ResponseResolver, rest, RestHandler } from 'msw';\nimport { Path } from 'node-match-path';\n\nexport type Scenarios = Record<string, RestHandler | RestHandler[]>;\n\nconst logger = pino({ prettyPrint: {\n  translateTime: true,\n  ignore: 'pid,hostname'\n} });\n\nconst defaultResolver: ResponseResolver = (_, res, ctx) => res(ctx.status(200));\n\nconst assertPath = (path: Path): path is string => {\n  if (path instanceof RegExp) {\n    throw new Error(`Only strings as path are supported`);\n  }\n  return true;\n}\n\n/**\n * Create REST endpoints (handlers) based on the given scenarios.\n * When a scenario is set using PUT /scenario, the path and method of the scenario handler are used as keys in the activeResolvers map and the resolver is used as value\n *\n * @param {*} scenarios an object of RestHandlers with scenario name as key.\n * @returns RestHandler[]\n */\nexport const createHandlers = (scenarios: Scenarios)  => {\n  /* Store currently active resolvers by method and path, for example:\n   * {\n   *   '/user/': {\n   *     GET: [resolver]\n   *   }\n   * }\n   */\n  const activeResolvers: Record<string, Record<string, ResponseResolver>> = {};\n\n  return [\n    // Create mock endpoints for all defined scenarios. Possible duplicates\n    ...Object.values(scenarios).flatMap(handler => {\n      const handlers = Array.isArray(handler) ? handler : [handler];\n      \n      return handlers.map(handler => {\n        const { method, path, header } = handler.info;\n        return rest[method.toLowerCase() as keyof typeof rest](path, (req, res, ctx) => {\n          // Forward call to active resolver that comes from scenario or fall back to default resolver\n          if (assertPath(path)) {\n            let resolver = activeResolvers[path]?.[method];\n            \n            if (!resolver) {\n              resolver = defaultResolver\n              logger.info(`${header} (default resolver)`);\n            } else {\n              logger.info(header);\n            }\n            \n            return resolver(req, res, ctx);\n          }\n        });\n      })\n    }),\n\n    // Create endpoint to set mock for any endpoint\n    rest.put('/scenario', (req, res, ctx) => {\n      const scenarioName = (req.body as Record<string, any>)?.scenario;\n\n      if (!scenarioName) {\n        return res(\n          ctx.status(400),\n          ctx.text(`Please provide a scenario name in the request body. Example: { \"scenario\": \"user success\" }`),\n        );\n      }\n\n      const handler = scenarios[scenarioName];\n      if (!handler) {\n        return res(ctx.status(400), ctx.text(`Scenario \"${scenarioName}\" does not exist`));\n      }\n      \n      const handlers = Array.isArray(handler) ? handler : [handler];\n\n      const headers = handlers.map(handler => {\n        const { path, method, header } = handler.info;\n        if (assertPath(path)) {\n          if (!(path in activeResolvers)) {\n            activeResolvers[path] = {};\n          }\n          \n          // @ts-ignore resolver is protected but I don't care\n          activeResolvers[path][method] = handler.resolver;\n          return header;\n        }\n        return;\n      })\n      \n      logger.info(`Set scenario \"${scenarioName}\" with resolvers for endpoints: ${headers.join(', ')}`)\n\n      return res(ctx.status(205));\n    }),\n  ];\n};\n"],"names":["logger","pino","prettyPrint","translateTime","ignore","defaultResolver","_","res","ctx","status","assertPath","path","RegExp","Error","createHandlers","scenarios","activeResolvers","Object","values","flatMap","handler","handlers","Array","isArray","map","info","method","header","rest","toLowerCase","req","resolver","put","scenarioName","body","scenario","text","headers","join"],"mappings":"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"}