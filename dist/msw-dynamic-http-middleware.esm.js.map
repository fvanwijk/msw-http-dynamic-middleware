{"version":3,"file":"msw-dynamic-http-middleware.esm.js","sources":["../src/middleware.ts","../src/index.ts"],"sourcesContent":["import path from 'path';\nimport express from 'express';\n\n// Serve the ui dir, where the UI app is built to\nexport const middleware = express.static(path.join(__dirname, 'ui'));\n","import pino from 'pino';\nimport { ResponseResolver, rest, RestHandler } from 'msw';\nimport { Path } from 'node-match-path';\n\nexport * from './middleware';\n\nexport type Scenarios = Record<string, RestHandler | RestHandler[]>;\n\nconst logger = pino({\n  prettyPrint: {\n    translateTime: true,\n    ignore: 'pid,hostname',\n  },\n});\n\nconst defaultResolver: ResponseResolver = (_, res, ctx) => res(ctx.status(200));\n\nconst assertPath = (path: Path): path is string => {\n  if (path instanceof RegExp) {\n    throw new Error(`Only strings as path are supported`);\n  }\n  return true;\n};\n\nconst setScenario = (\n  scenarios: Scenarios,\n  scenarioName: string,\n  activeResolvers: Record<string, Record<string, ResponseResolver>>,\n): void => {\n  const handler = scenarios[scenarioName];\n  if (!handler) {\n    throw new Error(`Scenario \"${scenarioName}\" does not exist`);\n  }\n\n  const handlers = Array.isArray(handler) ? handler : [handler];\n\n  const headers = handlers.map(handler => {\n    const { path, method, header } = handler.info;\n    if (assertPath(path)) {\n      if (!(path in activeResolvers)) {\n        activeResolvers[path] = {};\n      }\n\n      // @ts-ignore resolver is protected but I don't care\n      activeResolvers[path][method] = handler.resolver;\n      return header;\n    }\n    return;\n  });\n\n  logger.info(`Set scenario \"${scenarioName}\" with resolvers for endpoints: ${headers.join(', ')}`);\n};\n\n/**\n * Create REST endpoints (handlers) based on the given scenarios.\n * When a scenario is set using PUT /scenario, the path and method of the scenario handler are used as keys in the activeResolvers map and the resolver is used as value\n *\n * @param {Scenarios} scenarios an object of RestHandlers with scenario name as key.\n * @param {string} [defaultScenarioName] set a scenario when the server starts\n * @returns RestHandler[]\n */\nexport const createHandlers = (scenarios: Scenarios, defaultScenarioName?: string) => {\n  /* Store currently active resolvers by method and path, for example:\n   * {\n   *   '/user/': {\n   *     GET: [resolver]\n   *   }\n   * }\n   */\n  let activeResolvers: Record<string, Record<string, ResponseResolver>> = {};\n\n  if (defaultScenarioName) {\n    setScenario(scenarios, defaultScenarioName, activeResolvers);\n  }\n\n  return [\n    // Create mock endpoints for all defined scenarios. Possible duplicates\n    ...Object.values(scenarios).flatMap(handler => {\n      const handlers = Array.isArray(handler) ? handler : [handler];\n\n      return handlers.map(handler => {\n        const { method, path, header } = handler.info;\n\n        assertPath(path);\n\n        return rest[method.toLowerCase() as keyof typeof rest](path, (req, res, ctx) => {\n          // Forward call to active resolver that comes from scenario or fall back to default resolver\n          if (assertPath(path)) {\n            let resolver = activeResolvers[path]?.[method];\n\n            if (!resolver) {\n              resolver = defaultResolver;\n              logger.info(`${header} (default resolver)`);\n            } else {\n              logger.info(header);\n            }\n\n            return resolver(req, res, ctx);\n          }\n        });\n      });\n    }),\n\n    rest.get('/scenario', (_, res, ctx) => {\n      const mappedScenarios = Object.entries(scenarios).reduce((acc, [scenarioName, handlers]) => {\n        const toInfoLite = (handler: RestHandler, { header, method, path }: RestHandler['info']) => {\n          const activeResolver = activeResolvers[path.toString()]?.[method];\n\n          return {\n            // @ts-ignore\n            isActive: activeResolver === handler.resolver,\n            header,\n            method,\n            path: path.toString(),\n          };\n        };\n\n        if (Array.isArray(handlers)) {\n          acc[scenarioName] = handlers.map(handler => toInfoLite(handler, handler.info));\n        } else {\n          acc[scenarioName] = toInfoLite(handlers, handlers.info);\n        }\n\n        return acc;\n      }, {} as Record<string, { header: string; method: string; path: string } | { header: string; method: string; path: string }[]>);\n      return res(ctx.json({ scenarios: mappedScenarios }));\n    }),\n\n    // Create endpoint to set mock for any endpoint\n    rest.put('/scenario', (req, res, ctx) => {\n      const scenarioName = (req.body as Record<string, any>)?.scenario;\n\n      if (!scenarioName) {\n        return res(\n          ctx.status(400),\n          ctx.text(`Please provide a scenario name in the request body. Example: { \"scenario\": \"user success\" }`),\n        );\n      }\n\n      try {\n        setScenario(scenarios, scenarioName, activeResolvers);\n      } catch (error) {\n        return res(ctx.status(400), ctx.text(error.message));\n      }\n\n      return res(ctx.status(205));\n    }),\n\n    // Reset all active scenarios\n    rest.delete('/scenario', (req, res, ctx) => {\n      activeResolvers = {};\n\n      const resetAll: string | null = req.url.searchParams.get('resetAll');\n\n      if (defaultScenarioName && resetAll?.toLowerCase() !== 'true') {\n        logger.info('Reset server to default scenario');\n        setScenario(scenarios, defaultScenarioName, activeResolvers);\n      } else {\n        logger.info('Reset all handlers to default resolver');\n      }\n\n      return res(ctx.status(205));\n    }),\n  ];\n};\n"],"names":["middleware","express","path","join","__dirname","logger","pino","prettyPrint","translateTime","ignore","defaultResolver","_","res","ctx","status","assertPath","RegExp","Error","setScenario","scenarios","scenarioName","activeResolvers","handler","handlers","Array","isArray","headers","map","info","method","header","resolver","createHandlers","defaultScenarioName","Object","values","flatMap","rest","toLowerCase","req","get","mappedScenarios","entries","reduce","acc","toInfoLite","activeResolver","toString","isActive","json","put","body","scenario","text","error","message","resetAll","url","searchParams"],"mappings":"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"}