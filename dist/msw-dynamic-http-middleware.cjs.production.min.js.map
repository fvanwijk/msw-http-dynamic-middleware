{"version":3,"file":"msw-dynamic-http-middleware.cjs.production.min.js","sources":["../src/middleware.ts","../src/index.ts"],"sourcesContent":["import path from 'path';\nimport express from 'express';\n\n// Serve the ui dir, where the UI app is built to\nexport const middleware = express.static(path.join(__dirname, 'ui'));\n","import pino from 'pino';\nimport { ResponseResolver, rest, RestHandler } from 'msw';\nimport { Path } from 'node-match-path';\n\nexport * from './middleware';\n\nexport type Scenarios = Record<string, RestHandler | RestHandler[]>;\n\nconst logger = pino({\n  prettyPrint: {\n    translateTime: true,\n    ignore: 'pid,hostname',\n  },\n});\n\nconst defaultResolver: ResponseResolver = (_, res, ctx) => res(ctx.status(200));\n\nconst assertPath = (path: Path): path is string => {\n  if (path instanceof RegExp) {\n    throw new Error(`Only strings as path are supported`);\n  }\n  return true;\n};\n\nconst setScenario = (\n  scenarios: Scenarios,\n  scenarioName: string,\n  activeResolvers: Record<string, Record<string, ResponseResolver>>,\n): void => {\n  const handler = scenarios[scenarioName];\n  if (!handler) {\n    throw new Error(`Scenario \"${scenarioName}\" does not exist`);\n  }\n\n  const handlers = Array.isArray(handler) ? handler : [handler];\n\n  const headers = handlers.map(handler => {\n    const { path, method, header } = handler.info;\n    if (assertPath(path)) {\n      if (!(path in activeResolvers)) {\n        activeResolvers[path] = {};\n      }\n\n      // @ts-ignore resolver is protected but I don't care\n      activeResolvers[path][method] = handler.resolver;\n      return header;\n    }\n    return;\n  });\n\n  logger.info(`Set scenario \"${scenarioName}\" with resolvers for endpoints: ${headers.join(', ')}`);\n};\n\n/**\n * Create REST endpoints (handlers) based on the given scenarios.\n * When a scenario is set using PUT /scenario, the path and method of the scenario handler are used as keys in the activeResolvers map and the resolver is used as value\n *\n * @param {Scenarios} scenarios an object of RestHandlers with scenario name as key.\n * @param {string} [defaultScenarioName] set a scenario when the server starts\n * @returns RestHandler[]\n */\nexport const createHandlers = (scenarios: Scenarios, defaultScenarioName?: string) => {\n  /* Store currently active resolvers by method and path, for example:\n   * {\n   *   '/user/': {\n   *     GET: [resolver]\n   *   }\n   * }\n   */\n  let activeResolvers: Record<string, Record<string, ResponseResolver>> = {};\n\n  if (defaultScenarioName) {\n    setScenario(scenarios, defaultScenarioName, activeResolvers);\n  }\n\n  return [\n    // Create mock endpoints for all defined scenarios. Possible duplicates\n    ...Object.values(scenarios).flatMap(handler => {\n      const handlers = Array.isArray(handler) ? handler : [handler];\n\n      return handlers.map(handler => {\n        const { method, path, header } = handler.info;\n\n        assertPath(path);\n\n        return rest[method.toLowerCase() as keyof typeof rest](path, (req, res, ctx) => {\n          // Forward call to active resolver that comes from scenario or fall back to default resolver\n          if (assertPath(path)) {\n            let resolver = activeResolvers[path]?.[method];\n\n            if (!resolver) {\n              resolver = defaultResolver;\n              logger.info(`${header} (default resolver)`);\n            } else {\n              logger.info(header);\n            }\n\n            return resolver(req, res, ctx);\n          }\n        });\n      });\n    }),\n\n    rest.get('/scenario', (_, res, ctx) => {\n      const mappedScenarios = Object.entries(scenarios).reduce((acc, [scenarioName, handlers]) => {\n        const toInfoLite = (handler: RestHandler, { header, method, path }: RestHandler['info']) => {\n          const activeResolver = activeResolvers[path.toString()]?.[method];\n\n          return {\n            // @ts-ignore\n            isActive: activeResolver === handler.resolver,\n            header,\n            method,\n            path: path.toString(),\n          };\n        };\n\n        if (Array.isArray(handlers)) {\n          acc[scenarioName] = handlers.map(handler => toInfoLite(handler, handler.info));\n        } else {\n          acc[scenarioName] = toInfoLite(handlers, handlers.info);\n        }\n\n        return acc;\n      }, {} as Record<string, { header: string; method: string; path: string } | { header: string; method: string; path: string }[]>);\n      return res(ctx.json({ scenarios: mappedScenarios }));\n    }),\n\n    // Create endpoint to set mock for any endpoint\n    rest.put('/scenario', (req, res, ctx) => {\n      const scenarioName = (req.body as Record<string, any>)?.scenario;\n\n      if (!scenarioName) {\n        return res(\n          ctx.status(400),\n          ctx.text(`Please provide a scenario name in the request body. Example: { \"scenario\": \"user success\" }`),\n        );\n      }\n\n      try {\n        setScenario(scenarios, scenarioName, activeResolvers);\n      } catch (error) {\n        return res(ctx.status(400), ctx.text(error.message));\n      }\n\n      return res(ctx.status(205));\n    }),\n\n    // Reset all active scenarios\n    rest.delete('/scenario', (req, res, ctx) => {\n      activeResolvers = {};\n\n      const resetAll: string | null = req.url.searchParams.get('resetAll');\n\n      if (defaultScenarioName && resetAll?.toLowerCase() !== 'true') {\n        logger.info('Reset server to default scenario');\n        setScenario(scenarios, defaultScenarioName, activeResolvers);\n      } else {\n        logger.info('Reset all handlers to default resolver');\n      }\n\n      return res(ctx.status(205));\n    }),\n  ];\n};\n"],"names":["middleware","path","join","__dirname","logger","pino","prettyPrint","translateTime","ignore","defaultResolver","_","res","ctx","status","assertPath","RegExp","Error","setScenario","scenarios","scenarioName","activeResolvers","handler","headers","Array","isArray","map","info","method","header","resolver","defaultScenarioName","Object","values","flatMap","rest","toLowerCase","req","_activeResolvers$path","get","mappedScenarios","entries","reduce","acc","handlers","toInfoLite","isActive","toString","_activeResolvers$path2","json","put","body","_req$body","scenario","text","error","message","resetAll","url","searchParams"],"mappings":"yMAIaA,+BAA4BC,EAAKC,KAAKC,UAAW,OCIxDC,EAASC,EAAK,CAClBC,YAAa,CACXC,eAAe,EACfC,OAAQ,kBAINC,EAAoC,SAACC,EAAGC,EAAKC,UAAQD,EAAIC,EAAIC,OAAO,OAEpEC,EAAa,SAACb,MACdA,aAAgBc,aACZ,IAAIC,mDAEL,GAGHC,EAAc,SAClBC,EACAC,EACAC,OAEMC,EAAUH,EAAUC,OACrBE,QACG,IAAIL,mBAAmBG,0BAKzBG,GAFWC,MAAMC,QAAQH,GAAWA,EAAU,CAACA,IAE5BI,KAAI,SAAAJ,SACMA,EAAQK,KAAjCzB,IAAAA,KAAM0B,IAAAA,OAAQC,IAAAA,UAClBd,EAAWb,UACPA,KAAQmB,IACZA,EAAgBnB,GAAQ,IAI1BmB,EAAgBnB,GAAM0B,GAAUN,EAAQQ,SACjCD,KAKXxB,EAAOsB,sBAAsBP,qCAA+CG,EAAQpB,KAAK,+BAW7D,SAACgB,EAAsBY,OAQ/CV,EAAoE,UAEpEU,GACFb,EAAYC,EAAWY,EAAqBV,aAKzCW,OAAOC,OAAOd,GAAWe,SAAQ,SAAAZ,UACjBE,MAAMC,QAAQH,GAAWA,EAAU,CAACA,IAErCI,KAAI,SAAAJ,SACeA,EAAQK,KAAjCC,IAAAA,OAAQ1B,IAAAA,KAAM2B,IAAAA,cAEtBd,EAAWb,GAEJiC,OAAKP,EAAOQ,eAAoClC,GAAM,SAACmC,EAAKzB,EAAKC,MAElEE,EAAWb,GAAO,OAChB4B,WAAWT,EAAgBnB,WAAhBoC,EAAwBV,UAElCE,EAIHzB,EAAOsB,KAAKE,IAHZC,EAAWpB,EACXL,EAAOsB,KAAQE,0BAKVC,EAASO,EAAKzB,EAAKC,cAMlCsB,OAAKI,IAAI,aAAa,SAAC5B,EAAGC,EAAKC,OACvB2B,EAAkBR,OAAOS,QAAQtB,GAAWuB,QAAO,SAACC,SAAoBC,OACtEC,EAAa,SAACvB,WAAwBO,IAAAA,OAAQD,IAAAA,OAAQ1B,IAAAA,WAGnD,CAEL4C,mBAJqBzB,EAAgBnB,EAAK6C,oBAArBC,EAAmCpB,MAI3BN,EAAQQ,SACrCD,OAAAA,EACAD,OAAAA,EACA1B,KAAMA,EAAK6C,oBAKbJ,QADEnB,MAAMC,QAAQmB,GACIA,EAASlB,KAAI,SAAAJ,UAAWuB,EAAWvB,EAASA,EAAQK,SAEpDkB,EAAWD,EAAUA,EAASjB,MAG7CgB,IACN,WACI/B,EAAIC,EAAIoC,KAAK,CAAE9B,UAAWqB,QAInCL,OAAKe,IAAI,aAAa,SAACb,EAAKzB,EAAKC,SACzBO,WAAgBiB,EAAIc,aAAJC,EAAkCC,aAEnDjC,SACIR,EACLC,EAAIC,OAAO,KACXD,EAAIyC,yGAKNpC,EAAYC,EAAWC,EAAcC,GACrC,MAAOkC,UACA3C,EAAIC,EAAIC,OAAO,KAAMD,EAAIyC,KAAKC,EAAMC,iBAGtC5C,EAAIC,EAAIC,OAAO,SAIxBqB,cAAY,aAAa,SAACE,EAAKzB,EAAKC,GAClCQ,EAAkB,OAEZoC,EAA0BpB,EAAIqB,IAAIC,aAAapB,IAAI,mBAErDR,GAAmD,gBAA5B0B,SAAAA,EAAUrB,gBACnC/B,EAAOsB,KAAK,oCACZT,EAAYC,EAAWY,EAAqBV,IAE5ChB,EAAOsB,KAAK,0CAGPf,EAAIC,EAAIC,OAAO"}