{"version":3,"file":"msw-dynamic-http-middleware.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import pino from 'pino';\nimport { ResponseResolver, rest, RestHandler } from 'msw';\nimport { Path } from 'node-match-path';\n\nexport type Scenarios = Record<string, RestHandler | RestHandler[]>;\n\nconst logger = pino({ prettyPrint: {\n  translateTime: true,\n  ignore: 'pid,hostname'\n} });\n\nconst defaultResolver: ResponseResolver = (_, res, ctx) => res(ctx.status(200));\n\nconst assertPath = (path: Path): path is string => {\n  if (path instanceof RegExp) {\n    throw new Error(`Only strings as path are supported`);\n  }\n  return true;\n}\n\n/**\n * Create REST endpoints (handlers) based on the given scenarios.\n * When a scenario is set using PUT /scenario, the path and method of the scenario handler are used as keys in the activeResolvers map and the resolver is used as value\n *\n * @param {*} scenarios an object of RestHandlers with scenario name as key.\n * @returns RestHandler[]\n */\nexport const createHandlers = (scenarios: Scenarios)  => {\n  /* Store currently active resolvers by method and path, for example:\n   * {\n   *   '/user/': {\n   *     GET: [resolver]\n   *   }\n   * }\n   */\n  const activeResolvers: Record<string, Record<string, ResponseResolver>> = {};\n\n  return [\n    // Create mock endpoints for all defined scenarios. Possible duplicates\n    ...Object.values(scenarios).flatMap(handler => {\n      const handlers = Array.isArray(handler) ? handler : [handler];\n      \n      return handlers.map(handler => {\n        const { method, path, header } = handler.info;\n        return rest[method.toLowerCase() as keyof typeof rest](path, (req, res, ctx) => {\n          // Forward call to active resolver that comes from scenario or fall back to default resolver\n          if (assertPath(path)) {\n            let resolver = activeResolvers[path]?.[method];\n            \n            if (!resolver) {\n              resolver = defaultResolver\n              logger.info(`${header} (default resolver)`);\n            } else {\n              logger.info(header);\n            }\n            \n            return resolver(req, res, ctx);\n          }\n        });\n      })\n    }),\n\n    // Create endpoint to set mock for any endpoint\n    rest.put('/scenario', (req, res, ctx) => {\n      const scenarioName = (req.body as Record<string, any>)?.scenario;\n\n      if (!scenarioName) {\n        return res(\n          ctx.status(400),\n          ctx.text(`Please provide a scenario name in the request body. Example: { \"scenario\": \"user success\" }`),\n        );\n      }\n\n      const handler = scenarios[scenarioName];\n      if (!handler) {\n        return res(ctx.status(400), ctx.text(`Scenario \"${scenarioName}\" does not exist`));\n      }\n      \n      const handlers = Array.isArray(handler) ? handler : [handler];\n\n      const headers = handlers.map(handler => {\n        const { path, method, header } = handler.info;\n        if (assertPath(path)) {\n          if (!(path in activeResolvers)) {\n            activeResolvers[path] = {};\n          }\n          \n          // @ts-ignore resolver is protected but I don't care\n          activeResolvers[path][method] = handler.resolver;\n          return header;\n        }\n        return;\n      })\n      \n      logger.info(`Set scenario \"${scenarioName}\" with resolvers for endpoints: ${headers.join(', ')}`)\n\n      return res(ctx.status(205));\n    }),\n  ];\n};\n"],"names":["logger","pino","prettyPrint","translateTime","ignore","defaultResolver","_","res","ctx","status","assertPath","path","RegExp","Error","scenarios","activeResolvers","Object","values","flatMap","handler","Array","isArray","map","info","method","header","rest","toLowerCase","req","resolver","_activeResolvers$path","put","scenarioName","body","_req$body","scenario","text","headers","join"],"mappings":"gKAMMA,EAASC,EAAK,CAAEC,YAAa,CACjCC,eAAe,EACfC,OAAQ,kBAGJC,EAAoC,SAACC,EAAGC,EAAKC,UAAQD,EAAIC,EAAIC,OAAO,OAEpEC,EAAa,SAACC,MACdA,aAAgBC,aACZ,IAAIC,mDAEL,0BAUqB,SAACC,OAQvBC,EAAoE,mBAIrEC,OAAOC,OAAOH,GAAWI,SAAQ,SAAAC,UACjBC,MAAMC,QAAQF,GAAWA,EAAU,CAACA,IAErCG,KAAI,SAAAH,SACeA,EAAQI,KAAjCC,IAAAA,OAAQb,IAAAA,KAAMc,IAAAA,cACfC,OAAKF,EAAOG,eAAoChB,GAAM,SAACiB,EAAKrB,EAAKC,MAElEE,EAAWC,GAAO,OAChBkB,WAAWd,EAAgBJ,WAAhBmB,EAAwBN,UAElCK,EAIH7B,EAAOuB,KAAKE,IAHZI,EAAWxB,EACXL,EAAOuB,KAAQE,0BAKVI,EAASD,EAAKrB,EAAKC,cAOlCkB,OAAKK,IAAI,aAAa,SAACH,EAAKrB,EAAKC,SACzBwB,WAAgBJ,EAAIK,aAAJC,EAAkCC,aAEnDH,SACIzB,EACLC,EAAIC,OAAO,KACXD,EAAI4B,yGAIFjB,EAAUL,EAAUkB,OACrBb,SACIZ,EAAIC,EAAIC,OAAO,KAAMD,EAAI4B,kBAAkBJ,2BAK9CK,GAFWjB,MAAMC,QAAQF,GAAWA,EAAU,CAACA,IAE5BG,KAAI,SAAAH,SACMA,EAAQI,KAAjCZ,IAAAA,KAAMa,IAAAA,OAAQC,IAAAA,UAClBf,EAAWC,UACPA,KAAQI,IACZA,EAAgBJ,GAAQ,IAI1BI,EAAgBJ,GAAMa,GAAUL,EAAQU,SACjCJ,YAKXzB,EAAOuB,sBAAsBS,qCAA+CK,EAAQC,KAAK,OAElF/B,EAAIC,EAAIC,OAAO"}